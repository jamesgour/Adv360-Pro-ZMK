#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <248>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        rpdvdollar: rpdvdollar {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDVDOLLAR";
            bindings = <&kp DLLR>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv1: rpdv1 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV1";
            bindings = <&kp PLUS>, <&kp KP_NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv2: rpdv2 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV2";
            bindings = <&kp LBKT>, <&kp KP_NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv3: rpdv3 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV3";
            bindings = <&kp LBRC>, <&kp RS(KP_NUMBER_3)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv4: rpdv4 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV4";
            bindings = <&kp LPAR>, <&kp KP_NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv5: rpdv5 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV5";
            bindings = <&kp AMPS>, <&kp KP_NUMBER_5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv6: rpdv6 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV6";
            bindings = <&kp EQUAL>, <&kp KP_NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv7: rpdv7 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV7";
            bindings = <&kp RPAR>, <&kp KP_NUMBER_7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv8: rpdv8 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV8";
            bindings = <&kp RBRC>, <&kp LS(KP_NUMBER_8)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv9: rpdv9 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV9";
            bindings = <&kp RBKT>, <&kp KP_NUMBER_9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdv0: rpdv0 {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDV0";
            bindings = <&kp STAR>, <&kp KP_NUMBER_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdvbang: rpdvbang {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDVBANG";
            bindings = <&kp EXCL>, <&kp PRCNT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdvpipe: rpdvpipe {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDVPIPE";
            bindings = <&kp PIPE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdvfslash: rpdvfslash {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDVFSLASH";
            bindings = <&kp FSLH>, <&kp QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdvat: rpdvat {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDVAT";
            bindings = <&kp AT>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpdvbslash: rpdvbslash {
            compatible = "zmk,behavior-mod-morph";
            label = "RPDVBSLASH";
            bindings = <&kp BSLH>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1     &kp N2       &kp N3       &kp N4       &kp N5           &tog 2                                                   &mo 4        &kp N6  &kp N7    &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q      &kp W        &kp E        &kp R        &kp T            &tog 1                                                   &none        &kp Y   &kp U     &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A      &hm LC(X) S  &hm LC(C) D  &hm LC(V) F  &hm LS(LG(S)) G  &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none        &kp H   &kp J     &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z      &kp X        &kp C        &kp V        &kp B                                 &kp HOME      &kp PG_UP                          &kp N   &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
&mo 3      &kp GRAVE  &kp CAPS     &kp DOWN     &kp UP                        &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &lt 5 SPACE          &kp LEFT  &kp RIGHT  &kp LBKT  &kp RBKT  &mo 3
            >;
        };

        REAL_PROGRAMMERS_DVORAK {
            bindings = <
&rpdvpipe  &rpdv1       &rpdv2       &rpdv3       &rpdv4       &rpdv5           &tog 2                                                   &mo 4        &rpdv6  &rpdv7    &rpdv8     &rpdv9       &rpdv0   &rpdvbang
&kp TAB    &kp SEMI     &kp COMMA    &kp DOT      &kp P        &kp Y            &tog 1                                                   &none        &kp F   &kp G     &kp C      &kp R        &kp L    &rpdvbslash
&kp ESC    &kp A        &hm LC(X) O  &hm LC(C) E  &hm LC(V) U  &hm LS(LG(S)) I  &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none        &kp D   &kp H     &kp T      &kp N        &kp S    &kp MINUS
&kp LSHFT  &kp APOS     &kp Q        &kp J        &kp K        &kp X                                 &kp HOME      &kp PG_UP                          &kp B   &kp M     &kp W      &kp V        &kp Z    &kp RSHFT
&mo 3      &rpdvdollar  &kp CAPS     &kp DOWN     &kp UP                        &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &lt 5 SPACE          &kp LEFT  &kp RIGHT  &rpdvfslash  &rpdvat  &mo 3
            >;
        };

        keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 4      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 3      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 3
            >;
        };

        fn {
            bindings = <
&kp F11  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &tog 2                                      &mo 4   &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F12
&trans   &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans  &trans   &trans
&trans   &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans  &trans   &trans
&trans   &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans   &trans
&trans   &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        SHORTCUTS {
            bindings = <
&trans  &kp C_PREV         &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE   &kp C_VOLUME_UP    &kp C_NEXT         &trans                                      &trans  &trans             &trans             &trans             &trans             &trans                     &trans
&trans  &trans             &trans             &trans             &trans             &trans             &trans                                      &trans  &trans             &trans             &trans             &trans             &trans                     &trans
&trans  &kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(D)))  &kp LS(LA(LC(F)))  &kp LS(LA(LC(G)))  &trans  &trans  &trans      &trans  &trans  &trans  &kp LS(LA(LC(H)))  &kp LS(LA(LC(J)))  &kp LS(LA(LC(K)))  &kp LS(LA(LC(L)))  &kp LS(LA(LC(SEMICOLON)))  &trans
&trans  &trans             &trans             &trans             &trans             &trans                             &trans      &trans                  &trans             &trans             &trans             &trans             &trans                     &trans
&trans  &trans             &trans             &trans             &trans                                &trans  &trans  &trans      &trans  &trans  &trans                     &trans             &trans             &trans             &trans                     &trans
            >;
        };
    };
};
